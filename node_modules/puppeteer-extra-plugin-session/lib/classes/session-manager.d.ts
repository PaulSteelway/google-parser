import { Page } from 'puppeteer';
import { SessionData } from '../types/session-data';
import { StorageProviderName } from './storage-provider';
export interface ISessionManagerOptions {
    /**
     * List of storage providers to enable.
     * If none is provided, all the storage providers will be enabled.
     */
    storageProviders?: StorageProviderName[];
}
export declare const defaultSessionManagerOptions: ISessionManagerOptions;
export declare class SessionManager {
    protected readonly page: Page;
    constructor(page: Page);
    dump(options?: ISessionManagerOptions): Promise<SessionData>;
    restore(sessionData: SessionData, options?: ISessionManagerOptions): Promise<void>;
    /**
     * Helper function to serialize the output of dump into JSON format.
     */
    dumpString(options?: ISessionManagerOptions): Promise<string>;
    /**
     * Helper function to parse a JSON string into a SessionData object and feed it to `restore`
     */
    restoreString(sessionData: string, options?: ISessionManagerOptions): Promise<void>;
}
